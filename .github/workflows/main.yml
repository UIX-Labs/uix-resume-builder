name: deploy resume-builder-fe-service
on:
  push:
    branches:
      - main # Run only on pushes to main
  workflow_dispatch: # (Optional) allow manual runs

env:
  AWS_REGION: ap-south-1

jobs:
  deploy:
    name: deploy resume-builder-fe-service
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "PROJECT_NAME=resume-builder" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=resume-builder-stage-fe" >> $GITHUB_ENV
          echo "ECS_SERVICE=resume-builder-stage-fe-svc" >> $GITHUB_ENV
          echo "ECS_CLUSTER=resume-builder-stage-cluster" >> $GITHUB_ENV
          echo "TASK_DEFINITION_NAME=resume-builder-stage-fe-td" >> $GITHUB_ENV
          echo "CONTAINER_NAME=resume-builder-stage-fe-container" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}" >> $GITHUB_ENV

          echo "NEXT_PUBLIC_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_LINKEDIN_CLIENT_ID=${{ secrets.NEXT_PUBLIC_LINKEDIN_CLIENT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_GOOGLE_REDIRECT_URI=${{ secrets.NEXT_PUBLIC_GOOGLE_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_LINKEDIN_CLIENT_SECRET=${{ secrets.NEXT_PUBLIC_LINKEDIN_CLIENT_SECRET }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.PROJECT_NAME }}-${IMAGE_TAG} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${PROJECT_NAME}-${IMAGE_TAG}
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${PROJECT_NAME}-${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Download Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_NAME }} --query taskDefinition > tmp-task-definition.json
      - name: Clean Task Definition
        run: |
          jq 'del(.enableFaultInjection)' tmp-task-definition.json > task-definition.json

      - name: Update Task Definition with New Image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy demandify-fe-warehouse-svc
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
